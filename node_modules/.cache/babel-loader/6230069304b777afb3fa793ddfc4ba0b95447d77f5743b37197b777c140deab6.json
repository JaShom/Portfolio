{"ast":null,"code":"var _jsxFileName = \"D:\\\\github\\\\Portfolio\\\\myportfolio\\\\src\\\\contexts\\\\PopUpContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst popUpContext = /*#__PURE__*/createContext(undefined);\nexport function usePopUpContext() {\n  _s();\n  const checkContext = useContext(popUpContext);\n  if (!checkContext) {\n    throw new Error(\"Pop up context is not being called inside the context provider\");\n  }\n  return checkContext;\n}\n_s(usePopUpContext, \"YtM1Kkmu07Dizc8PBW/zhNGFA94=\");\nexport const PopUpProvider = ({\n  children\n}) => {\n  _s2();\n  // defining \n  const [isPopUpVisibleState, setIsPopUpVisibleState] = useState(false);\n  const [isDisplayComponent, setIsDisplayComponent] = useState(null);\n  const showPopUp = () => {\n    setIsPopUpVisibleState(true);\n  };\n  const hidePopUp = () => {\n    setIsDisplayComponent(null);\n    setIsPopUpVisibleState(false);\n  };\n  const setDisplayComponent = component => {\n    setDisplayComponent(component);\n  };\n  const contextVal = {\n    isPopUpVisible: isPopUpVisibleState,\n    displayContent: isDisplayComponent,\n    showPopUp: showPopUp,\n    hidePopUp: hidePopUp,\n    setDisplayComponent: setIsDisplayComponent\n  };\n  return /*#__PURE__*/_jsxDEV(popUpContext.Provider, {\n    value: contextVal,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n};\n_s2(PopUpProvider, \"1hZIwrj9NN2CHOE0s8I/8xe4qOI=\");\n_c = PopUpProvider;\nvar _c;\n$RefreshReg$(_c, \"PopUpProvider\");","map":{"version":3,"names":["createContext","useContext","useState","jsxDEV","_jsxDEV","popUpContext","undefined","usePopUpContext","_s","checkContext","Error","PopUpProvider","children","_s2","isPopUpVisibleState","setIsPopUpVisibleState","isDisplayComponent","setIsDisplayComponent","showPopUp","hidePopUp","setDisplayComponent","component","contextVal","isPopUpVisible","displayContent","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/github/Portfolio/myportfolio/src/contexts/PopUpContext.tsx"],"sourcesContent":["import { FC, ReactNode, createContext, useContext, useState } from \"react\"\r\n\r\ninterface iPopUpContext {\r\n    isPopUpVisible: boolean\r\n    displayContent: JSX.Element | null\r\n\r\n    showPopUp?: () => void\r\n    hidePopUp?: () => void\r\n    setDisplayComponent?: (component: JSX.Element | null) => void\r\n}\r\n\r\ntype ProviderProps = {\r\n    children: ReactNode\r\n}\r\n\r\nconst popUpContext = createContext<iPopUpContext | undefined>(undefined)\r\n\r\nexport function usePopUpContext(): iPopUpContext {\r\n\r\n    const checkContext = useContext(popUpContext)\r\n\r\n    if(!checkContext) {\r\n        throw new Error(\"Pop up context is not being called inside the context provider\")\r\n    }\r\n\r\n    return checkContext\r\n\r\n}\r\n\r\nexport const PopUpProvider: FC<ProviderProps> = ({children}) => {\r\n\r\n    // defining \r\n    const [isPopUpVisibleState, setIsPopUpVisibleState] = useState<boolean>(false)\r\n    const [isDisplayComponent, setIsDisplayComponent] = useState<JSX.Element | null>(null)\r\n    \r\n    const showPopUp = (): void => {\r\n        setIsPopUpVisibleState(true)\r\n    }\r\n\r\n    const hidePopUp = (): void => {\r\n        setIsDisplayComponent(null)\r\n        setIsPopUpVisibleState(false)\r\n    }\r\n\r\n    const setDisplayComponent = (component: JSX.Element | null): void => {\r\n        setDisplayComponent(component)\r\n    }\r\n\r\n    const contextVal: iPopUpContext = {\r\n        isPopUpVisible: isPopUpVisibleState,\r\n        displayContent: isDisplayComponent,\r\n\r\n        showPopUp: showPopUp,\r\n        hidePopUp: hidePopUp,\r\n        setDisplayComponent: setIsDisplayComponent\r\n    }\r\n\r\n    return (\r\n        <popUpContext.Provider value={contextVal}>\r\n            {children}\r\n        </popUpContext.Provider>\r\n    )\r\n\r\n}"],"mappings":";;;AAAA,SAAwBA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAe1E,MAAMC,YAAY,gBAAGL,aAAa,CAA4BM,SAAS,CAAC;AAExE,OAAO,SAASC,eAAeA,CAAA,EAAkB;EAAAC,EAAA;EAE7C,MAAMC,YAAY,GAAGR,UAAU,CAACI,YAAY,CAAC;EAE7C,IAAG,CAACI,YAAY,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,gEAAgE,CAAC;EACrF;EAEA,OAAOD,YAAY;AAEvB;AAACD,EAAA,CAVeD,eAAe;AAY/B,OAAO,MAAMI,aAAgC,GAAGA,CAAC;EAACC;AAAQ,CAAC,KAAK;EAAAC,GAAA;EAE5D;EACA,MAAM,CAACC,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGb,QAAQ,CAAU,KAAK,CAAC;EAC9E,MAAM,CAACc,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGf,QAAQ,CAAqB,IAAI,CAAC;EAEtF,MAAMgB,SAAS,GAAGA,CAAA,KAAY;IAC1BH,sBAAsB,CAAC,IAAI,CAAC;EAChC,CAAC;EAED,MAAMI,SAAS,GAAGA,CAAA,KAAY;IAC1BF,qBAAqB,CAAC,IAAI,CAAC;IAC3BF,sBAAsB,CAAC,KAAK,CAAC;EACjC,CAAC;EAED,MAAMK,mBAAmB,GAAIC,SAA6B,IAAW;IACjED,mBAAmB,CAACC,SAAS,CAAC;EAClC,CAAC;EAED,MAAMC,UAAyB,GAAG;IAC9BC,cAAc,EAAET,mBAAmB;IACnCU,cAAc,EAAER,kBAAkB;IAElCE,SAAS,EAAEA,SAAS;IACpBC,SAAS,EAAEA,SAAS;IACpBC,mBAAmB,EAAEH;EACzB,CAAC;EAED,oBACIb,OAAA,CAACC,YAAY,CAACoB,QAAQ;IAACC,KAAK,EAAEJ,UAAW;IAAAV,QAAA,EACpCA;EAAQ;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACU,CAAC;AAGhC,CAAC;AAAAjB,GAAA,CAlCYF,aAAgC;AAAAoB,EAAA,GAAhCpB,aAAgC;AAAA,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}